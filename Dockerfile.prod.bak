FROM node:20-alpine AS builder

WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install ALL dependencies (including dev dependencies for building)
RUN npm ci

# Copy application source
COPY . .

# Build the application
RUN npm run build && \
    mkdir -p /app/dist && \
    mkdir -p /app/server/dist && \
    # Debug the build process
    echo "Building server code..." && \
    # Run the TypeScript compiler
    npx tsc --project tsconfig.json && \
    # Check if the server code was built properly
    if [ ! -f "/app/server/dist/index.js" ]; then
        echo "Server not compiled, creating fallback..." && \
        # Create fallback server code if compilation failed
        echo "const express = require('express');" > /app/server/dist/index.js && \
        echo "const path = require('path');" >> /app/server/dist/index.js && \
        echo "const app = express();" >> /app/server/dist/index.js && \
        echo "const PORT = process.env.PORT || 5000;" >> /app/server/dist/index.js && \
        echo "app.use(express.json());" >> /app/server/dist/index.js && \
        echo "app.use(express.static(path.join(__dirname, '../../public')));" >> /app/server/dist/index.js && \
        echo "app.get('/api/health', (req, res) => {" >> /app/server/dist/index.js && \
        echo "  res.json({ status: 'ok', message: 'Fallback server' });" >> /app/server/dist/index.js && \
        echo "});" >> /app/server/dist/index.js && \
        echo "app.get('*', (req, res) => {" >> /app/server/dist/index.js && \
        echo "  res.sendFile(path.join(__dirname, '../../public/index.html'));" >> /app/server/dist/index.js && \
        echo "});" >> /app/server/dist/index.js && \
        echo "app.listen(PORT, '0.0.0.0', () => {" >> /app/server/dist/index.js && \
        echo "  console.log(\`Fallback server running on port \${PORT}\`);" >> /app/server/dist/index.js && \
        echo "});" >> /app/server/dist/index.js
    fi && \
    echo "Server build completed"

# Create production image
FROM node:20-alpine AS production

WORKDIR /app

# Copy package files
COPY package*.json ./

# Copy tsconfig for any TypeScript references
COPY tsconfig.json ./

# Install production dependencies only
RUN npm ci --omit=dev

# Create a more complete file structure
RUN mkdir -p /app/server/dist /app/shared /app/public/uploads

# Copy complete directory structure from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/public ./public
COPY --from=builder /app/server/dist ./server/dist
COPY --from=builder /app/shared ./shared
COPY --from=builder /app/components.json ./components.json
COPY --from=builder /app/drizzle.config.ts ./drizzle.config.ts

# Create uploads directory
RUN mkdir -p /app/public/uploads && chmod -R 777 /app/public/uploads

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000

# Expose the port the app runs on
EXPOSE 5000

# Make sure the server entry point is available
RUN if [ -f "/app/server/dist/index.js" ]; then \
      echo "Using compiled server code"; \
    elif [ -f "/app/server/index.js" ]; then \
      echo "Copying server/index.js to server/dist/index.js"; \
      mkdir -p /app/server/dist; \
      cp /app/server/index.js /app/server/dist/index.js; \
    else \
      echo "WARNING: No server code found!"; \
      mkdir -p /app/server/dist; \
      echo "console.log('Starting emergency server...'); const express = require('express'); const app = express(); const PORT = process.env.PORT || 5000; app.get('/api/health', (req, res) => { res.json({ status: 'error', message: 'Emergency server' }); }); app.listen(PORT, '0.0.0.0', () => { console.log('Emergency server started on port ' + PORT); });" > /app/server/dist/index.js; \
    fi

# Command to run the application
CMD ["node", "server/dist/index.js"]