[
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: cancelled events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, type FROM events WHERE status = 'cancelled' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "status_priority",
      "complexity": "simple",
      "pattern": "status_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with array aggregation of types\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT continent, ARRAY_AGG(DISTINCT type ORDER BY type) as event_types FROM events WHERE continent IS NOT NULL GROUP BY continent"
      }
    ],
    "metadata": {
      "category": "postgresql_aggregates",
      "complexity": "complex",
      "pattern": "array_aggregation",
      "source": "PostgreSQL Aggregate Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events this year\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n\nRelated tables: attendees, cfp_submissions, assets\nPostgreSQL version: 15\nGeographic columns available: location, country, region, continent"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority, type FROM events ORDER BY start_date DESC LIMIT 10"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "simple",
      "originalSuccess": false,
      "error": "PostgreSQL uses EXTRACT, not YEAR()",
      "timestamp": "2025-09-18T17:57:47.968Z"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with composite index optimization\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\nOptimize for performance using indexes and best practices."
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location FROM events WHERE status = 'confirmed' AND type = 'conference' ORDER BY start_date DESC LIMIT 50"
      }
    ],
    "metadata": {
      "category": "postgresql_performance",
      "complexity": "medium",
      "pattern": "composite_index_optimization",
      "source": "PostgreSQL Performance Tuning Documentation",
      "notes": "Optimized for (status, type, start_date) composite index"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with the most attendees\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT e.id, e.name, e.location, COUNT(a.id) as attendee_count FROM events e LEFT JOIN attendees a ON e.id = a.event_id GROUP BY e.id, e.name, e.location ORDER BY attendee_count DESC LIMIT 10"
      }
    ],
    "metadata": {
      "category": "related_data",
      "complexity": "complex",
      "pattern": "top_events_by_attendees"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with lag and lead dates\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, start_date, LAG(start_date) OVER (ORDER BY start_date) as previous_event_date, LEAD(start_date) OVER (ORDER BY start_date) as next_event_date FROM events ORDER BY start_date"
      }
    ],
    "metadata": {
      "category": "postgresql_window",
      "complexity": "complex",
      "pattern": "lag_lead_window",
      "source": "PostgreSQL Window Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Find events in South America\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent, start_date, end_date, status, priority FROM events WHERE continent = 'South America' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "continent_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *\nGenerate ONLY SELECT queries (read-only)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status FROM events ORDER BY start_date DESC LIMIT 25"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "simple",
      "pattern": "single_word",
      "synthetic": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with percentile calculations\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT continent, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY EXTRACT(EPOCH FROM (end_date - start_date))/3600) as median_duration_hours FROM events WHERE continent IS NOT NULL AND end_date IS NOT NULL GROUP BY continent"
      }
    ],
    "metadata": {
      "category": "postgresql_aggregates",
      "complexity": "complex",
      "pattern": "percentile_calculation",
      "source": "PostgreSQL Aggregate Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: All webinar events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE type = 'webinar' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "event_type",
      "complexity": "simple",
      "pattern": "type_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with formatted dates\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, TO_CHAR(start_date, 'YYYY-MM-DD HH24:MI') as formatted_start FROM events ORDER BY start_date"
      }
    ],
    "metadata": {
      "category": "postgresql_datetime",
      "complexity": "medium",
      "pattern": "date_formatting",
      "source": "PostgreSQL Date/Time Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: List events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *\nGenerate ONLY SELECT queries (read-only)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status FROM events ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "simple",
      "pattern": "simple_list",
      "synthetic": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: high priority events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE priority = 'high' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "status_priority",
      "complexity": "simple",
      "pattern": "priority_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with JSON array length\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\n- metadata (jsonb, optional event metadata)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, jsonb_array_length(metadata->'tags') as tag_count FROM events WHERE metadata IS NOT NULL AND metadata ? 'tags'"
      }
    ],
    "metadata": {
      "category": "postgresql_json",
      "complexity": "medium",
      "pattern": "json_array_length",
      "source": "PostgreSQL JSON Functions Documentation",
      "notes": "Assumes metadata JSONB column with tags array"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Count events by priority level\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT priority, COUNT(*) FROM events GROUP BY priority ORDER BY CASE priority WHEN 'critical' THEN 1 WHEN 'high' THEN 2 WHEN 'medium' THEN 3 WHEN 'low' THEN 4 END"
      }
    ],
    "metadata": {
      "category": "count",
      "complexity": "medium",
      "pattern": "priority_grouped_count"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with JSON metadata extraction\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\n- metadata (jsonb, optional event metadata)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, (metadata->>'speaker_count')::int as speaker_count FROM events WHERE metadata IS NOT NULL AND metadata ? 'speaker_count'"
      }
    ],
    "metadata": {
      "category": "postgresql_json",
      "complexity": "medium",
      "pattern": "json_extraction",
      "source": "PostgreSQL JSON Functions Documentation",
      "notes": "Assumes metadata JSONB column exists"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with efficient counting\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\nAvoid common anti-patterns and use PostgreSQL best practices."
      },
      {
        "role": "assistant",
        "content": "SELECT COUNT(DISTINCT id) FROM events"
      }
    ],
    "metadata": {
      "category": "postgresql_antipatterns",
      "complexity": "medium",
      "pattern": "efficient_counting_fix",
      "source": "PostgreSQL Best Practices Documentation",
      "notes": "Corrects anti-pattern: Use COUNT(DISTINCT) instead of subquery for counting unique values"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events from the current week\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, start_date FROM events WHERE start_date >= date_trunc('week', CURRENT_DATE) AND start_date < date_trunc('week', CURRENT_DATE) + interval '1 week'"
      }
    ],
    "metadata": {
      "category": "postgresql_datetime",
      "complexity": "complex",
      "pattern": "date_trunc_week",
      "source": "PostgreSQL Date/Time Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Find events in Europe\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent, start_date, end_date, status, priority FROM events WHERE continent = 'Europe' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "continent_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events that have ended\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *\nGenerate ONLY SELECT queries (read-only)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status FROM events WHERE end_date < NOW() ORDER BY end_date DESC"
      }
    ],
    "metadata": {
      "category": "temporal",
      "complexity": "simple",
      "pattern": "ended_events",
      "synthetic": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show all North America events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent, start_date, end_date, status FROM events WHERE continent = 'North America' ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "continent_filter_alt"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events in Japan\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, start_date, end_date, status, priority FROM events WHERE country = 'Japan' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "country_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with ranking by start date\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, start_date, RANK() OVER (ORDER BY start_date) as date_rank, DENSE_RANK() OVER (ORDER BY start_date) as dense_date_rank FROM events"
      }
    ],
    "metadata": {
      "category": "postgresql_window",
      "complexity": "complex",
      "pattern": "ranking_window",
      "source": "PostgreSQL Window Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with uppercase country names\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, UPPER(country) as country_upper FROM events WHERE country IS NOT NULL"
      }
    ],
    "metadata": {
      "category": "postgresql_strings",
      "complexity": "simple",
      "pattern": "string_case_conversion",
      "source": "PostgreSQL String Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with location starting with specific text\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location FROM events WHERE location ~ '^[Nn]ew'"
      }
    ],
    "metadata": {
      "category": "postgresql_strings",
      "complexity": "medium",
      "pattern": "regex_matching",
      "source": "PostgreSQL String Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with attendee counts\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT e.id, e.name, e.location, e.start_date, COUNT(a.id) as attendee_count FROM events e LEFT JOIN attendees a ON e.id = a.event_id GROUP BY e.id, e.name, e.location, e.start_date ORDER BY attendee_count DESC"
      }
    ],
    "metadata": {
      "category": "related_data",
      "complexity": "complex",
      "pattern": "event_attendee_count"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events this year\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date FROM events WHERE EXTRACT(YEAR FROM start_date) = 2024"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "simple",
      "pattern": "mysql_function",
      "notes": "Corrected from common error: MySQL YEAR() function not supported"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events in current quarter\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, start_date FROM events WHERE EXTRACT(QUARTER FROM start_date) = EXTRACT(QUARTER FROM CURRENT_DATE) AND EXTRACT(YEAR FROM start_date) = EXTRACT(YEAR FROM CURRENT_DATE)"
      }
    ],
    "metadata": {
      "category": "postgresql_datetime",
      "complexity": "medium",
      "pattern": "quarter_filtering",
      "source": "PostgreSQL Date/Time Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events happening this week\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date FROM events WHERE start_date >= date_trunc('week', NOW()) AND start_date < date_trunc('week', NOW()) + interval '1 week' ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "temporal",
      "complexity": "complex",
      "pattern": "current_week"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: All conferences\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE type = 'conference' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "simple",
      "pattern": "backtick_syntax",
      "notes": "Corrected from common error: Backtick syntax error"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with row numbers by continent\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, continent, start_date, ROW_NUMBER() OVER (PARTITION BY continent ORDER BY start_date) as event_number FROM events WHERE continent IS NOT NULL"
      }
    ],
    "metadata": {
      "category": "postgresql_window",
      "complexity": "complex",
      "pattern": "row_number_window",
      "source": "PostgreSQL Window Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Find events outside of Asia\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, continent, start_date, end_date FROM events WHERE continent != 'Asia' OR continent IS NULL ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "medium",
      "pattern": "negative_geographic_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: pending events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, type FROM events WHERE status = 'pending' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "status_priority",
      "complexity": "simple",
      "pattern": "status_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: All meetup events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE type = 'meetup' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "event_type",
      "complexity": "simple",
      "pattern": "type_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with trimmed and cleaned names\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, TRIM(REGEXP_REPLACE(name, '\\s+', ' ', 'g')) as clean_name FROM events WHERE name IS NOT NULL"
      }
    ],
    "metadata": {
      "category": "postgresql_strings",
      "complexity": "medium",
      "pattern": "string_cleaning",
      "source": "PostgreSQL String Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events between January and March 2024\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date FROM events WHERE start_date >= '2024-01-01' AND start_date < '2024-04-01' ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "temporal",
      "complexity": "medium",
      "pattern": "date_range"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events in United Kingdom\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, start_date, end_date, status, priority FROM events WHERE country = 'United Kingdom' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "country_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Find events in Oceania\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent, start_date, end_date, status, priority FROM events WHERE continent = 'Oceania' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "continent_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with CFP submission counts\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT e.id, e.name, e.location, e.start_date, COUNT(c.id) as cfp_count FROM events e LEFT JOIN cfp_submissions c ON e.id = c.event_id GROUP BY e.id, e.name, e.location, e.start_date ORDER BY cfp_count DESC"
      }
    ],
    "metadata": {
      "category": "related_data",
      "complexity": "complex",
      "pattern": "event_cfp_count"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with location substring extraction\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, SUBSTRING(location FROM 1 FOR 20) as short_location FROM events WHERE location IS NOT NULL"
      }
    ],
    "metadata": {
      "category": "postgresql_strings",
      "complexity": "medium",
      "pattern": "substring_extraction",
      "source": "PostgreSQL String Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events ordered by priority (custom order)\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, priority, start_date FROM events ORDER BY CASE priority WHEN 'critical' THEN 1 WHEN 'high' THEN 2 WHEN 'medium' THEN 3 WHEN 'low' THEN 4 END, start_date ASC"
      }
    ],
    "metadata": {
      "category": "postgresql_specific",
      "complexity": "complex",
      "pattern": "custom_order"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with EXISTS instead of IN for better performance\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\nOptimize for performance using indexes and best practices."
      },
      {
        "role": "assistant",
        "content": "SELECT e.id, e.name, e.location FROM events e WHERE EXISTS (SELECT 1 FROM attendees a WHERE a.event_id = e.id AND a.status = 'confirmed')"
      }
    ],
    "metadata": {
      "category": "postgresql_performance",
      "complexity": "complex",
      "pattern": "exists_optimization",
      "source": "PostgreSQL Performance Tuning Documentation",
      "notes": "EXISTS is often more efficient than IN with subqueries"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with running totals by continent\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, continent, start_date, COUNT(*) OVER (PARTITION BY continent ORDER BY start_date ROWS UNBOUNDED PRECEDING) as running_count FROM events WHERE continent IS NOT NULL ORDER BY continent, start_date"
      }
    ],
    "metadata": {
      "category": "postgresql_window",
      "complexity": "complex",
      "pattern": "running_total_window",
      "source": "PostgreSQL Window Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with JSON key existence check\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\n- metadata (jsonb, optional event metadata)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, metadata FROM events WHERE metadata ? 'registration_required' AND (metadata->>'registration_required')::boolean = true"
      }
    ],
    "metadata": {
      "category": "postgresql_json",
      "complexity": "medium",
      "pattern": "json_key_existence",
      "source": "PostgreSQL JSON Functions Documentation",
      "notes": "Assumes metadata JSONB column"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events next month\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date FROM events WHERE start_date >= date_trunc('month', NOW()) + interval '1 month' AND start_date < date_trunc('month', NOW()) + interval '2 months' ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "temporal",
      "complexity": "complex",
      "pattern": "next_month"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: low priority events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE priority = 'low' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "status_priority",
      "complexity": "simple",
      "pattern": "priority_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show all Africa events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent, start_date, end_date, status FROM events WHERE continent = 'Africa' ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "continent_filter_alt"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: medium priority events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE priority = 'medium' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "status_priority",
      "complexity": "simple",
      "pattern": "priority_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: How many events are there?\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT COUNT(*) FROM events"
      }
    ],
    "metadata": {
      "category": "count",
      "complexity": "simple",
      "pattern": "simple_count"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Total events this year\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT COUNT(*) FROM events WHERE EXTRACT(YEAR FROM start_date) = EXTRACT(YEAR FROM NOW())"
      }
    ],
    "metadata": {
      "category": "count",
      "complexity": "simple",
      "pattern": "temporal_extract_count"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show cancelled events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *\nGenerate ONLY SELECT queries (read-only)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status FROM events WHERE status = 'cancelled' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "status_priority",
      "complexity": "simple",
      "pattern": "cancelled_events",
      "synthetic": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show all South America events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent, start_date, end_date, status FROM events WHERE continent = 'South America' ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "continent_filter_alt"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: critical priority events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE priority = 'critical' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "status_priority",
      "complexity": "simple",
      "pattern": "priority_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: All hackathon events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE type = 'hackathon' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "event_type",
      "complexity": "simple",
      "pattern": "type_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show all Oceania events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent, start_date, end_date, status FROM events WHERE continent = 'Oceania' ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "continent_filter_alt"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events grouped by month\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT DATE_TRUNC('month', start_date) as month, COUNT(*) FROM events GROUP BY DATE_TRUNC('month', start_date) ORDER BY month"
      }
    ],
    "metadata": {
      "category": "postgresql_specific",
      "complexity": "complex",
      "pattern": "date_truncation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events from last month\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, start_date FROM events WHERE start_date >= date_trunc('month', CURRENT_DATE) - interval '1 month' AND start_date < date_trunc('month', CURRENT_DATE)"
      }
    ],
    "metadata": {
      "category": "postgresql_datetime",
      "complexity": "complex",
      "pattern": "date_trunc_month",
      "source": "PostgreSQL Date/Time Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: All conferences\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n\nRelated tables: attendees, cfp_submissions, assets\nPostgreSQL version: 15\nGeographic columns available: location, country, region, continent"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority, type FROM events WHERE type = 'conference' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "event_type",
      "complexity": "simple",
      "originalSuccess": false,
      "error": "Syntax error near backtick",
      "timestamp": "2025-09-18T17:57:47.968Z"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events in United States\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, start_date, end_date, status, priority FROM events WHERE country = 'United States' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "country_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with covering index query\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\nOptimize for performance using indexes and best practices."
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, start_date, status FROM events WHERE continent = 'Europe' AND start_date > CURRENT_DATE ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "postgresql_performance",
      "complexity": "medium",
      "pattern": "covering_index_query",
      "source": "PostgreSQL Performance Tuning Documentation",
      "notes": "Query can be satisfied entirely from index"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events in Europe or North America\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, continent, start_date, end_date FROM events WHERE continent IN ('Europe', 'North America') ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "medium",
      "pattern": "multiple_continent_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with string aggregation of countries\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT continent, STRING_AGG(DISTINCT country, ', ' ORDER BY country) as countries FROM events WHERE continent IS NOT NULL AND country IS NOT NULL GROUP BY continent"
      }
    ],
    "metadata": {
      "category": "postgresql_aggregates",
      "complexity": "complex",
      "pattern": "string_aggregation",
      "source": "PostgreSQL Aggregate Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show all Asia events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent, start_date, end_date, status FROM events WHERE continent = 'Asia' ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "continent_filter_alt"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Past events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status FROM events WHERE end_date < NOW() ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "temporal",
      "complexity": "simple",
      "pattern": "past_events"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show me events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *\nGenerate ONLY SELECT queries (read-only)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority, type FROM events ORDER BY start_date DESC LIMIT 20"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "simple",
      "pattern": "vague_request",
      "synthetic": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show all events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority, type FROM events ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "simple",
      "pattern": "missing_from_clause",
      "notes": "Corrected from common error: Missing FROM clause"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with age in days\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, start_date, EXTRACT(DAY FROM (CURRENT_DATE - start_date::date)) as days_ago FROM events WHERE start_date < CURRENT_DATE"
      }
    ],
    "metadata": {
      "category": "postgresql_datetime",
      "complexity": "medium",
      "pattern": "date_extract_age",
      "source": "PostgreSQL Date/Time Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with case-insensitive name search\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location FROM events WHERE name ILIKE '%conference%'"
      }
    ],
    "metadata": {
      "category": "postgresql_strings",
      "complexity": "simple",
      "pattern": "case_insensitive_like",
      "source": "PostgreSQL String Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with case-insensitive location search\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country FROM events WHERE location ILIKE '%paris%'"
      }
    ],
    "metadata": {
      "category": "postgresql_specific",
      "complexity": "medium",
      "pattern": "case_insensitive_search"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: How many events in each country?\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT country, COUNT(*) FROM events WHERE country IS NOT NULL GROUP BY country ORDER BY COUNT(*) DESC"
      }
    ],
    "metadata": {
      "category": "count",
      "complexity": "medium",
      "pattern": "geographic_grouped_count"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with proper NULL handling\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\nAvoid common anti-patterns and use PostgreSQL best practices."
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country FROM events WHERE country IS NULL"
      }
    ],
    "metadata": {
      "category": "postgresql_antipatterns",
      "complexity": "medium",
      "pattern": "null_comparison_fix",
      "source": "PostgreSQL Best Practices Documentation",
      "notes": "Corrects anti-pattern: Use IS NULL instead of = NULL"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Find events in Africa\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent, start_date, end_date, status, priority FROM events WHERE continent = 'Africa' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "continent_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events starting today\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date FROM events WHERE DATE(start_date) = CURRENT_DATE ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "temporal",
      "complexity": "medium",
      "pattern": "today_events"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with first and last values by type\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, type, start_date, FIRST_VALUE(name) OVER (PARTITION BY type ORDER BY start_date) as first_event_of_type, LAST_VALUE(name) OVER (PARTITION BY type ORDER BY start_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_event_of_type FROM events WHERE type IS NOT NULL"
      }
    ],
    "metadata": {
      "category": "postgresql_window",
      "complexity": "complex",
      "pattern": "first_last_value_window",
      "source": "PostgreSQL Window Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events by creation date\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *\nGenerate ONLY SELECT queries (read-only)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, created_at, start_date FROM events ORDER BY created_at DESC LIMIT 30"
      }
    ],
    "metadata": {
      "category": "temporal",
      "complexity": "simple",
      "pattern": "creation_date_sort",
      "synthetic": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Confirmed conferences\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE type = 'conference' AND status = 'confirmed' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "event_type",
      "complexity": "medium",
      "pattern": "type_status_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events in Europe\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n\nRelated tables: attendees, cfp_submissions, assets\nPostgreSQL version: 15\nGeographic columns available: location, country, region, continent"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority, type FROM events ORDER BY start_date DESC LIMIT 10"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "originalSuccess": false,
      "error": "Missing FROM clause",
      "timestamp": "2025-09-18T17:57:47.968Z"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: How many events are there in Asia?\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT COUNT(*) FROM events WHERE continent = 'Asia'"
      }
    ],
    "metadata": {
      "category": "count",
      "complexity": "simple",
      "pattern": "geographic_count"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with concatenated location info\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, CONCAT(location, ', ', country) as full_location FROM events WHERE location IS NOT NULL AND country IS NOT NULL"
      }
    ],
    "metadata": {
      "category": "postgresql_strings",
      "complexity": "simple",
      "pattern": "string_concatenation",
      "source": "PostgreSQL String Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with efficient pagination\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\nOptimize for performance using indexes and best practices."
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date FROM events WHERE start_date > '2024-01-01' ORDER BY start_date DESC, id DESC LIMIT 25 OFFSET 0"
      }
    ],
    "metadata": {
      "category": "postgresql_performance",
      "complexity": "medium",
      "pattern": "efficient_pagination",
      "source": "PostgreSQL Performance Tuning Documentation",
      "notes": "Uses stable sort with id for consistent pagination"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Recent events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date FROM events WHERE start_date > NOW() - INTERVAL '30 days'"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "simple",
      "pattern": "mysql_function",
      "notes": "Corrected from common error: MySQL DATE_SUB not supported"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events by day of week\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT EXTRACT(DOW FROM start_date) as day_of_week, TO_CHAR(start_date, 'Day') as day_name, COUNT(*) FROM events GROUP BY EXTRACT(DOW FROM start_date), TO_CHAR(start_date, 'Day') ORDER BY day_of_week"
      }
    ],
    "metadata": {
      "category": "postgresql_datetime",
      "complexity": "complex",
      "pattern": "day_of_week_extraction",
      "source": "PostgreSQL Date/Time Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Upcoming events with confirmed attendees\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT DISTINCT e.id, e.name, e.location, e.start_date FROM events e JOIN attendees a ON e.id = a.event_id WHERE e.start_date > NOW() AND a.status = 'confirmed' ORDER BY e.start_date ASC"
      }
    ],
    "metadata": {
      "category": "related_data",
      "complexity": "complex",
      "pattern": "upcoming_with_confirmed_attendees"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with statistical aggregates\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT continent, COUNT(*) as total_events, MIN(start_date) as earliest_event, MAX(start_date) as latest_event, AVG(EXTRACT(EPOCH FROM (end_date - start_date))/3600) as avg_duration_hours FROM events WHERE continent IS NOT NULL AND end_date IS NOT NULL GROUP BY continent"
      }
    ],
    "metadata": {
      "category": "postgresql_aggregates",
      "complexity": "complex",
      "pattern": "statistical_aggregates",
      "source": "PostgreSQL Aggregate Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events in the last 30 days\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status FROM events WHERE start_date >= NOW() - interval '30 days' AND start_date <= NOW() ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "temporal",
      "complexity": "medium",
      "pattern": "last_30_days"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with proper LIKE escaping\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\nAvoid common anti-patterns and use PostgreSQL best practices."
      },
      {
        "role": "assistant",
        "content": "SELECT id, name FROM events WHERE name LIKE '%100\\%%' ESCAPE '\\'"
      }
    ],
    "metadata": {
      "category": "postgresql_antipatterns",
      "complexity": "medium",
      "pattern": "like_escaping_fix",
      "source": "PostgreSQL Best Practices Documentation",
      "notes": "Corrects anti-pattern: Special characters in LIKE patterns should be escaped"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: How many events are confirmed?\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT COUNT(*) FROM events WHERE status = 'confirmed'"
      }
    ],
    "metadata": {
      "category": "count",
      "complexity": "simple",
      "pattern": "filtered_count"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Long event names\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *\nGenerate ONLY SELECT queries (read-only)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, LENGTH(name) as name_length FROM events WHERE LENGTH(name) > 50 ORDER BY LENGTH(name) DESC"
      }
    ],
    "metadata": {
      "category": "postgresql_strings",
      "complexity": "medium",
      "pattern": "string_length_filter",
      "synthetic": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with proper date comparison\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\nAvoid common anti-patterns and use PostgreSQL best practices."
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date FROM events WHERE DATE(start_date) = '2024-01-01'"
      }
    ],
    "metadata": {
      "category": "postgresql_antipatterns",
      "complexity": "medium",
      "pattern": "date_comparison_fix",
      "source": "PostgreSQL Best Practices Documentation",
      "notes": "Corrects anti-pattern: Date comparison should account for time component"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events duration in hours\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, start_date, end_date, EXTRACT(EPOCH FROM (end_date - start_date))/3600 as duration_hours FROM events WHERE end_date IS NOT NULL"
      }
    ],
    "metadata": {
      "category": "postgresql_datetime",
      "complexity": "medium",
      "pattern": "duration_calculation",
      "source": "PostgreSQL Date/Time Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: confirmed events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, type FROM events WHERE status = 'confirmed' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "status_priority",
      "complexity": "simple",
      "pattern": "status_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with conditional aggregation\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT continent, COUNT(*) as total, COUNT(*) FILTER (WHERE status = 'confirmed') as confirmed, COUNT(*) FILTER (WHERE priority = 'high') as high_priority FROM events WHERE continent IS NOT NULL GROUP BY continent"
      }
    ],
    "metadata": {
      "category": "postgresql_aggregates",
      "complexity": "complex",
      "pattern": "conditional_aggregation",
      "source": "PostgreSQL Aggregate Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Find events in Asia\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n\nRelated tables: attendees, cfp_submissions, assets\nPostgreSQL version: 15\nGeographic columns available: location, country, region, continent"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, region, continent FROM events WHERE continent = 'Asia'"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "originalSuccess": true,
      "timestamp": "2025-09-18T17:57:47.968Z"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Count events by type\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT type, COUNT(*) FROM events GROUP BY type ORDER BY COUNT(*) DESC"
      }
    ],
    "metadata": {
      "category": "count",
      "complexity": "medium",
      "pattern": "grouped_count"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Find events with no location\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *\nGenerate ONLY SELECT queries (read-only)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status FROM events WHERE location IS NULL OR location = '' ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "medium",
      "pattern": "null_handling",
      "synthetic": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events without countries\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *\nGenerate ONLY SELECT queries (read-only)"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, start_date FROM events WHERE country IS NULL ORDER BY start_date DESC"
      }
    ],
    "metadata": {
      "category": "geographic",
      "complexity": "simple",
      "pattern": "missing_geographic_data",
      "synthetic": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: High priority upcoming events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority FROM events WHERE priority = 'high' AND start_date > NOW() ORDER BY start_date ASC"
      }
    ],
    "metadata": {
      "category": "status_priority",
      "complexity": "medium",
      "pattern": "priority_temporal_filter"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with index-optimized continent search\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions\nOptimize for performance using indexes and best practices."
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date FROM events WHERE continent = 'Asia' ORDER BY start_date DESC LIMIT 20"
      }
    ],
    "metadata": {
      "category": "postgresql_performance",
      "complexity": "simple",
      "pattern": "indexed_filter_with_limit",
      "source": "PostgreSQL Performance Tuning Documentation",
      "notes": "Uses continent index, includes LIMIT for performance"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Events with location length\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nPostgreSQL version: 15\nAlways use specific column names, avoid SELECT *\nUse proper PostgreSQL syntax and functions"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, LENGTH(location) as location_length FROM events WHERE location IS NOT NULL ORDER BY LENGTH(location) DESC"
      }
    ],
    "metadata": {
      "category": "postgresql_strings",
      "complexity": "simple",
      "pattern": "string_length",
      "source": "PostgreSQL String Functions Documentation"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show all events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n\nRelated tables: attendees, cfp_submissions, assets\nPostgreSQL version: 15\nGeographic columns available: location, country, region, continent"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, start_date, end_date, status, priority, type FROM events ORDER BY start_date DESC LIMIT 10"
      }
    ],
    "metadata": {
      "category": "general",
      "complexity": "simple",
      "originalSuccess": false,
      "error": "Missing FROM clause",
      "timestamp": "2025-09-18T17:57:47.968Z"
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Show me all conference events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, start_date, end_date, status, priority FROM events WHERE type = 'conference' ORDER BY start_date DESC LIMIT 50"
      }
    ],
    "metadata": {
      "category": "event_type",
      "complexity": "simple",
      "pattern": "type_filter_optimized",
      "improved": true
    }
  },
  {
    "messages": [
      {
        "role": "system",
        "content": "You are an expert PostgreSQL query generator for an event management system. \nGenerate ONLY SELECT queries that are:\n- Read-only (no INSERT, UPDATE, DELETE, or DDL)\n- Syntactically correct for PostgreSQL 15\n- Performance-optimized using proper indexes\n- Using specific column names (avoid SELECT *)\n- Handling NULL values properly\n- Using PostgreSQL-specific functions when appropriate\n\nAlways include FROM clause and proper WHERE conditions. Use LIMIT for large result sets."
      },
      {
        "role": "user",
        "content": "Generate a PostgreSQL SELECT query for: Find all upcoming events\n\nDatabase Schema:\nevents table:\n- id (integer, primary key)\n- name (text, event name)\n- location (text, event location/venue)\n- country (text, country name)\n- region (text, geographic region)\n- continent (text, continent name)\n- start_date (timestamp, event start)\n- end_date (timestamp, event end)\n- status (text: confirmed, pending, cancelled)\n- priority (text: low, medium, high, critical)\n- type (text: conference, meetup, workshop, webinar, hackathon)\n- created_at (timestamp)\n- updated_at (timestamp)\n\nRelated tables:\n- attendees (user_id, event_id, name, email, status)\n- cfp_submissions (id, event_id, submitter_id, submitter_name, title, status)\n- assets (id, event_id, type, name, uploaded_by_name)\n\nPostgreSQL version: 15\nGeographic columns: location, country, region, continent\nIndexed columns: id, start_date, status, type, country, continent\nAlways use specific column names, avoid SELECT *"
      },
      {
        "role": "assistant",
        "content": "SELECT id, name, location, country, start_date, end_date, status, priority, type FROM events WHERE start_date > NOW() ORDER BY start_date ASC LIMIT 30"
      }
    ],
    "metadata": {
      "category": "temporal",
      "complexity": "simple",
      "pattern": "future_events_optimized",
      "improved": true
    }
  }
]