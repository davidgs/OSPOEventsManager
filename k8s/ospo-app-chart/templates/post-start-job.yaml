{{- if .Values.postgresql.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ospo-app.fullname" . }}-post-start
  labels:
    {{- include "ospo-app.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        {{- include "ospo-app.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
      - name: post-start
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Starting post-deployment configuration..."

          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL..."
          until pg_isready -h {{ include "ospo-app.fullname" . }}-postgres -p {{ .Values.postgresql.service.port }} -U {{ .Values.postgresql.auth.username }}; do
            echo "PostgreSQL is not ready yet..."
            sleep 5
          done
          echo "PostgreSQL is ready!"

          # Create database schema
          echo "Creating database schema..."
          PGPASSWORD={{ .Values.postgresql.auth.password }} psql -h {{ include "ospo-app.fullname" . }}-postgres -p {{ .Values.postgresql.service.port }} -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }} << 'EOF'

          -- Create extensions if they don't exist
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

          -- Create users table if it doesn't exist
          CREATE TABLE IF NOT EXISTS users (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            keycloak_id VARCHAR(255) UNIQUE NOT NULL,
            username VARCHAR(255) UNIQUE NOT NULL,
            email VARCHAR(255) UNIQUE NOT NULL,
            first_name VARCHAR(255),
            last_name VARCHAR(255),
            title VARCHAR(255),
            organization VARCHAR(255),
            bio TEXT,
            social_links JSONB DEFAULT '{}',
            profile_picture_url VARCHAR(512),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create events table if it doesn't exist
          CREATE TABLE IF NOT EXISTS events (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            description TEXT,
            start_date DATE,
            end_date DATE,
            website VARCHAR(512),
            location VARCHAR(255),
            cfp_deadline DATE,
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create attendees table if it doesn't exist
          CREATE TABLE IF NOT EXISTS attendees (
            id SERIAL PRIMARY KEY,
            event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
            user_id UUID REFERENCES users(id) ON DELETE CASCADE,
            name VARCHAR(255),
            email VARCHAR(255),
            role VARCHAR(100),
            note TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create cfp_submissions table if it doesn't exist
          CREATE TABLE IF NOT EXISTS cfp_submissions (
            id SERIAL PRIMARY KEY,
            event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
            user_id UUID REFERENCES users(id) ON DELETE CASCADE,
            title VARCHAR(255) NOT NULL,
            abstract TEXT,
            submission_type VARCHAR(100),
            status VARCHAR(50) DEFAULT 'pending',
            submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create sponsorships table if it doesn't exist
          CREATE TABLE IF NOT EXISTS sponsorships (
            id SERIAL PRIMARY KEY,
            event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
            user_id UUID REFERENCES users(id) ON DELETE CASCADE,
            company_name VARCHAR(255) NOT NULL,
            level VARCHAR(100),
            amount DECIMAL(10,2),
            status VARCHAR(50) DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create assets table if it doesn't exist
          CREATE TABLE IF NOT EXISTS assets (
            id SERIAL PRIMARY KEY,
            event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
            user_id UUID REFERENCES users(id) ON DELETE CASCADE,
            filename VARCHAR(255) NOT NULL,
            original_filename VARCHAR(255),
            mime_type VARCHAR(100),
            size INTEGER,
            category VARCHAR(100),
            description TEXT,
            uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create stakeholders table if it doesn't exist
          CREATE TABLE IF NOT EXISTS stakeholders (
            id SERIAL PRIMARY KEY,
            user_id UUID REFERENCES users(id) ON DELETE CASCADE,
            name VARCHAR(255) NOT NULL,
            email VARCHAR(255) NOT NULL,
            role VARCHAR(100),
            organization VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create approval_workflows table if it doesn't exist
          CREATE TABLE IF NOT EXISTS approval_workflows (
            id SERIAL PRIMARY KEY,
            event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
            user_id UUID REFERENCES users(id) ON DELETE CASCADE,
            workflow_type VARCHAR(100) NOT NULL,
            status VARCHAR(50) DEFAULT 'pending',
            data JSONB DEFAULT '{}',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create indexes for performance
          CREATE INDEX IF NOT EXISTS idx_users_keycloak_id ON users(keycloak_id);
          CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
          CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
          CREATE INDEX IF NOT EXISTS idx_attendees_event_id ON attendees(event_id);
          CREATE INDEX IF NOT EXISTS idx_attendees_user_id ON attendees(user_id);
          CREATE INDEX IF NOT EXISTS idx_cfp_submissions_event_id ON cfp_submissions(event_id);
          CREATE INDEX IF NOT EXISTS idx_cfp_submissions_user_id ON cfp_submissions(user_id);
          CREATE INDEX IF NOT EXISTS idx_sponsorships_event_id ON sponsorships(event_id);
          CREATE INDEX IF NOT EXISTS idx_sponsorships_user_id ON sponsorships(user_id);
          CREATE INDEX IF NOT EXISTS idx_assets_event_id ON assets(event_id);
          CREATE INDEX IF NOT EXISTS idx_assets_user_id ON assets(user_id);
          CREATE INDEX IF NOT EXISTS idx_stakeholders_user_id ON stakeholders(user_id);
          CREATE INDEX IF NOT EXISTS idx_approval_workflows_event_id ON approval_workflows(event_id);
          CREATE INDEX IF NOT EXISTS idx_approval_workflows_user_id ON approval_workflows(user_id);

          -- Create updated_at trigger function
          CREATE OR REPLACE FUNCTION update_updated_at_column()
          RETURNS TRIGGER AS $$
          BEGIN
              NEW.updated_at = CURRENT_TIMESTAMP;
              RETURN NEW;
          END;
          $$ language 'plpgsql';

          -- Create triggers for updated_at
          DROP TRIGGER IF EXISTS update_users_updated_at ON users;
          CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

          DROP TRIGGER IF EXISTS update_events_updated_at ON events;
          CREATE TRIGGER update_events_updated_at BEFORE UPDATE ON events FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

          DROP TRIGGER IF EXISTS update_attendees_updated_at ON attendees;
          CREATE TRIGGER update_attendees_updated_at BEFORE UPDATE ON attendees FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

          DROP TRIGGER IF EXISTS update_cfp_submissions_updated_at ON cfp_submissions;
          CREATE TRIGGER update_cfp_submissions_updated_at BEFORE UPDATE ON cfp_submissions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

          DROP TRIGGER IF EXISTS update_sponsorships_updated_at ON sponsorships;
          CREATE TRIGGER update_sponsorships_updated_at BEFORE UPDATE ON sponsorships FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

          DROP TRIGGER IF EXISTS update_stakeholders_updated_at ON stakeholders;
          CREATE TRIGGER update_stakeholders_updated_at BEFORE UPDATE ON stakeholders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

          DROP TRIGGER IF EXISTS update_approval_workflows_updated_at ON approval_workflows;
          CREATE TRIGGER update_approval_workflows_updated_at BEFORE UPDATE ON approval_workflows FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

          EOF

          echo "Database schema created successfully!"

          {{- if .Values.keycloak.enabled }}
          # Wait for Keycloak to be ready
          echo "Waiting for Keycloak..."
          until curl -f -s http://{{ include "ospo-app.fullname" . }}-keycloak:{{ .Values.keycloak.service.port }}/auth/realms/master; do
            echo "Keycloak is not ready yet..."
            sleep 10
          done
          echo "Keycloak is ready!"

          # Install jq for JSON processing
          apk add --no-cache curl jq

          # Get admin access token
          echo "Getting Keycloak admin token..."
          ADMIN_TOKEN=$(curl -s -X POST "http://{{ include "ospo-app.fullname" . }}-keycloak:{{ .Values.keycloak.service.port }}/auth/realms/master/protocol/openid-connect/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username={{ .Values.keycloak.admin.username }}" \
            -d "password={{ .Values.keycloak.admin.password }}" \
            -d "grant_type=password" \
            -d "client_id=admin-cli" | jq -r '.access_token')

          if [ "$ADMIN_TOKEN" = "null" ] || [ -z "$ADMIN_TOKEN" ]; then
            echo "Failed to get admin token"
            exit 1
          fi

          echo "Admin token obtained successfully"

          # Check if realm exists
          echo "Checking if realm {{ .Values.keycloak.realm }} exists..."
          REALM_EXISTS=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" \
            "http://{{ include "ospo-app.fullname" . }}-keycloak:{{ .Values.keycloak.service.port }}/auth/admin/realms/{{ .Values.keycloak.realm }}" | jq -r '.realm // empty')

          if [ -z "$REALM_EXISTS" ]; then
            echo "Creating realm {{ .Values.keycloak.realm }}..."
            curl -s -X POST "http://{{ include "ospo-app.fullname" . }}-keycloak:{{ .Values.keycloak.service.port }}/auth/admin/realms" \
              -H "Authorization: Bearer $ADMIN_TOKEN" \
              -H "Content-Type: application/json" \
              -d @/tmp/realm-config/realm.json
            echo "Realm created successfully!"
          else
            echo "Realm {{ .Values.keycloak.realm }} already exists"
          fi
          {{- end }}

          echo "Post-deployment configuration completed successfully!"
        volumeMounts:
        {{- if .Values.keycloak.enabled }}
        - name: realm-config
          mountPath: /tmp/realm-config
        {{- end }}
      volumes:
      {{- if .Values.keycloak.enabled }}
      - name: realm-config
        configMap:
          name: keycloak-realm-config
      {{- end }}
{{- end }}