apiVersion: apps/v1
kind: Deployment
metadata:
  name: ospo-app
  labels:
    {{- include "ospo-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: application
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "ospo-app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        {{- include "ospo-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: application
    spec:
      initContainers:
        - name: wait-for-db
          image: postgres:{{ .Values.postgresql.image.tag }}
          command:
            - /bin/sh
            - -c
          args:
            - |
              echo "Waiting for PostgreSQL to be ready..."
              # Using EXACTLY the same connection logic that works in keycloak-db-init
              export PGPASSWORD={{ .Values.postgresql.auth.password }}
              for i in $(seq 1 60); do
                if psql -h postgres.{{ .Release.Namespace }}.svc.cluster.local -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }} -c "SELECT 1" > /dev/null 2>&1; then
                  echo "PostgreSQL is available and accessible"
                  exit 0
                fi
                echo "Waiting for PostgreSQL... attempt $i/60"
                sleep 5
              done
              
              # If we got here, try with just 'postgres' as a fallback
              echo "Failed with FQDN, trying short name 'postgres'..."
              for i in $(seq 1 5); do
                if psql -h postgres -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }} -c "SELECT 1" > /dev/null 2>&1; then
                  echo "PostgreSQL is available via short name"
                  exit 0
                fi
                echo "Attempt $i with short name failed"
                sleep 5
              done
              
              echo "PostgreSQL connection failed after multiple attempts"
              # Exit with error so we know there's a problem
              exit 1
        {{- if .Values.keycloak.enabled }}
        - name: wait-for-keycloak
          image: curlimages/curl:8.5.0
          command:
            - /bin/sh
            - -c
          args:
            - |
              echo "Waiting for Keycloak to be ready..."
              # More reliable health check using Keycloak's health endpoint
              for i in $(seq 1 60); do
                if curl -s http://keycloak.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.keycloak.service.port }}/auth/health/ready | grep -q "UP"; then
                  echo "Keycloak is available and ready"
                  exit 0
                fi
                echo "Waiting for Keycloak... attempt $i/60"
                sleep 5
              done
              
              echo "Keycloak did not become ready in time"
              exit 1
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.app.service.port }}
              protocol: TCP
          env:
            - name: NODE_ENV
              value: {{ .Values.app.env.NODE_ENV }}
            - name: PORT
              value: "{{ .Values.app.service.port }}"
            - name: SESSION_SECRET
              value: {{ .Values.app.env.SESSION_SECRET }}
            - name: SESSION_STORE_TYPE
              value: {{ .Values.app.env.SESSION_STORE_TYPE }}
            - name: VITE_SERVE_CLIENT
              value: "true"
            - name: BASE_URL
              value: "/"
            {{- if .Values.keycloak.enabled }}
            # K8s service connection details - keep it simple with just service name
            - name: KEYCLOAK_SERVICE_NAME
              value: "keycloak"
            - name: KEYCLOAK_SERVICE_PORT
              value: "{{ .Values.keycloak.service.port }}"
            # Standard Keycloak configuration
            - name: KEYCLOAK_URL
              value: "http://keycloak:{{ .Values.keycloak.service.port }}/auth"
            - name: KEYCLOAK_REALM
              value: {{ .Values.keycloak.realm }}
            - name: KEYCLOAK_CLIENT_ID
              value: {{ .Values.app.env.KEYCLOAK_CLIENT_ID }}
            - name: KEYCLOAK_CLIENT_SECRET
              value: {{ .Values.app.env.KEYCLOAK_CLIENT_SECRET }}
            - name: KEYCLOAK_CONFIG_FILE
              value: "/app/keycloak.json"
            {{- end }}
            {{- if .Values.postgresql.enabled }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@postgres.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.auth.database }}"
            - name: PGUSER
              value: {{ .Values.postgresql.auth.username }}
            - name: PGHOST
              value: "postgres.{{ .Release.Namespace }}.svc.cluster.local"
            - name: PGPASSWORD
              value: {{ .Values.postgresql.auth.password }}
            - name: PGDATABASE
              value: {{ .Values.postgresql.auth.database }}
            - name: PGPORT
              value: "{{ .Values.postgresql.service.port }}"
            {{- end }}
            {{- if .Values.minio.enabled }}
            - name: UPLOADS_DIR
              value: "/app/uploads"
            - name: MINIO_ENDPOINT
              value: "minio"
            - name: MINIO_PORT
              value: "{{ .Values.minio.service.apiPort }}"
            - name: MINIO_ROOT_USER
              value: {{ .Values.minio.auth.rootUser }}
            - name: MINIO_ROOT_PASSWORD
              value: {{ .Values.minio.auth.rootPassword }}
            - name: MINIO_BUCKET
              value: "uploads"
            {{- end }}
          volumeMounts:
            - name: uploads
              mountPath: /app/uploads
            - name: keycloak-config
              mountPath: /app/keycloak.json
              subPath: keycloak.json
          resources:
            {{- toYaml .Values.app.resources | nindent 12 }}
      volumes:
        - name: uploads
          {{- if and .Values.sharedVolume.enabled .Values.sharedVolume.persistentVolumeClaim.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.sharedVolume.persistentVolumeClaim.name }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: keycloak-config
          configMap:
            name: keycloak-client-config
---
apiVersion: v1
kind: Service
metadata:
  name: ospo-app
  labels:
    {{- include "ospo-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: application
spec:
  type: {{ .Values.app.service.type }}
  ports:
    - port: {{ .Values.app.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "ospo-app.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: application
{{- if .Values.loadBalancer.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: lb-ospo-app
  labels:
    {{- include "ospo-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: loadbalancer
  annotations:
    kubernetes.docker.internal/use-local-registry: "true"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - port: {{ .Values.loadBalancer.port }}
      targetPort: {{ .Values.app.service.port }}
      protocol: TCP
      name: http
  selector:
    {{- include "ospo-app.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: application
{{- end }}
{{- if and .Values.sharedVolume.enabled .Values.sharedVolume.persistentVolumeClaim.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.sharedVolume.persistentVolumeClaim.name }}
  labels:
    {{- include "ospo-app.labels" . | nindent 4 }}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.sharedVolume.persistentVolumeClaim.size }}
{{- end }}