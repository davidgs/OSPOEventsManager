{{- if .Values.keycloak.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  labels:
    {{- include "ospo-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: auth
  annotations:
    "helm.sh/hook-weight": "20"
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ospo-app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: auth
  template:
    metadata:
      labels:
        {{- include "ospo-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: auth
    spec:
      initContainers:
        - name: wait-for-db
          image: postgres:{{ .Values.postgresql.image.tag }}
          command:
            - /bin/sh
            - -c
          args:
            - |
              echo "Waiting for PostgreSQL to be ready..."
              export PGPASSWORD={{ .Values.postgresql.auth.password }}
              for i in $(seq 1 60); do
                if psql -h postgres.{{ .Release.Namespace }}.svc.cluster.local -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }} -c "SELECT 1" > /dev/null 2>&1; then
                  echo "PostgreSQL is available and accessible"
                  exit 0
                fi
                echo "Waiting for PostgreSQL... attempt $i/60"
                sleep 5
              done
              
              echo "PostgreSQL connection failed after multiple attempts"
              exit 1
      containers:
        - name: keycloak
          image: "{{ .Values.keycloak.image.repository }}:{{ .Values.keycloak.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.image.pullPolicy }}
          args:
            - start-dev
            - --import-realm
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: KC_HOSTNAME_STRICT
              value: "false"
            - name: KC_HTTP_RELATIVE_PATH
              value: "/auth"
            - name: KEYCLOAK_LOGLEVEL
              value: "INFO"
            - name: KC_CACHE
              value: "local"
            - name: KC_METRICS_ENABLED
              value: "true"
            - name: KC_PROXY
              value: "edge"
            - name: KC_DB_URL_HOST
              value: "postgres.{{ .Release.Namespace }}.svc.cluster.local"
            - name: DB_VENDOR
              value: "postgres"
            - name: DB_ADDR
              value: "postgres.{{ .Release.Namespace }}.svc.cluster.local"
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: {{ .Values.postgresql.auth.database }}
            - name: DB_USER
              value: {{ .Values.postgresql.auth.username }}
            - name: DB_PASSWORD
              value: {{ .Values.postgresql.auth.password }}
            - name: DB_SCHEMA
              value: "public"
            - name: KEYCLOAK_ADMIN
              value: {{ .Values.keycloak.admin.username }}
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: {{ .Values.keycloak.admin.password }}
            - name: KC_HEALTH_ENABLED
              value: "true"
            - name: KC_FEATURES
              value: "admin-api,account-api,account2,admin2,docker,impersonation,token-exchange,web-authn"
          volumeMounts:
            - name: realm-config
              mountPath: /opt/keycloak/data/import
          # Add health checks to help with startup sequencing
          startupProbe:
            httpGet:
              path: /auth/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /auth/health/ready
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /auth/health/live
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {{- toYaml .Values.keycloak.resources | nindent 12 }}
      volumes:
        - name: realm-config
          configMap:
            name: keycloak-realm-config
            items:
              - key: realm.json
                path: realm.json
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    {{- include "ospo-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: auth
spec:
  ports:
    - port: {{ .Values.keycloak.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "ospo-app.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: auth
{{- end }}