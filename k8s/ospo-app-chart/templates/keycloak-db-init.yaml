{{- if .Values.keycloak.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-db-init
  labels:
    {{- include "ospo-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: keycloak-setup
  annotations:
    "helm.sh/hook": post-install,pre-upgrade
    "helm.sh/hook-weight": "15"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:
        {{- include "ospo-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: keycloak-setup
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-postgres
          image: postgres:{{ .Values.postgresql.image.tag }}
          command:
            - /bin/sh
            - -c
          args:
            - |
              echo "Waiting for PostgreSQL to be ready..."
              # Wait for PostgreSQL service to be available with a more reliable check
              export PGPASSWORD={{ .Values.postgresql.auth.password }}
              for i in $(seq 1 60); do
                if psql -h postgres.{{ .Release.Namespace }}.svc.cluster.local -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }} -c "SELECT 1" > /dev/null 2>&1; then
                  echo "PostgreSQL is available and accessible"
                  exit 0
                fi
                echo "Waiting for PostgreSQL... attempt $i/60"
                sleep 5
              done
              
              echo "PostgreSQL connection failed after multiple attempts"
              exit 1
      containers:
        - name: postgres-client
          image: postgres:{{ .Values.postgresql.image.tag }}
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
          args:
            - |
              set -e
              echo "Waiting for PostgreSQL to be ready..."
              # Wait for PostgreSQL service to be available
              for i in $(seq 1 30); do
                if nc -z postgres 5432; then
                  echo "PostgreSQL is available"
                  break
                fi
                echo "Waiting for PostgreSQL... attempt $i/30"
                sleep 2
              done
              
              echo "Creating keycloak schema in PostgreSQL..."
              export PGPASSWORD={{ .Values.postgresql.auth.password }}
              export PGHOST=postgres.{{ .Release.Namespace }}.svc.cluster.local
              export PGUSER={{ .Values.postgresql.auth.username }}
              export PGDATABASE={{ .Values.postgresql.auth.database }}
              export PGPORT={{ .Values.postgresql.service.port }}
              
              # Attempt to create schema with retry logic
              for i in $(seq 1 10); do
                if psql -c "CREATE SCHEMA IF NOT EXISTS keycloak;" && \
                   psql -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";" && \
                   psql -c "SELECT 1 FROM keycloak.INFORMATION_SCHEMA.TABLES LIMIT 1" > /dev/null 2>&1 || true; then
                  echo "Keycloak schema created successfully!"
                  break
                fi
                echo "Retrying schema creation... attempt $i/10"
                sleep 3
              done
              echo "Schema created successfully!"
{{- end }}