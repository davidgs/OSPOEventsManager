# OpenShift-specific values for ospo-app with Otterize Security
# This file contains production-ready configurations with zero trust networking

# OpenShift configuration
openshift:
  enabled: true
  routes:
    enabled: true
    host: ""  # Will be auto-generated by OpenShift
    tls:
      enabled: true
      termination: edge
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    supplementalGroups: [1001]
    seccompProfile:
      type: RuntimeDefault

# Otterize Security (Intent-based Access Control) - ENABLED FOR PRODUCTION
otterize:
  enabled: true  # Enable zero trust networking
  credentials:
    clientId: "cli_2qzdt2865q"
    clientSecret: "838e61fc0fa3c3af9b6686232ef9f0fdaf42890e5afdce1ec34d7381a8823223"
  config:
    mode: "defaultShadow"  # Start with monitoring, change to defaultDeny for full protection
    certificateProvider: "otterize-cloud"
    namespace: "otterize-system"
  intents:
    # Define network intents for OSPO components
    enabled: true
    policies:
      - name: "ospo-app-to-postgres"
        from: "ospo-app"
        to: "postgres"
        ports: [5432]
      - name: "ospo-app-to-keycloak"
        from: "ospo-app"
        to: "keycloak"
        ports: [8080]
      - name: "ospo-app-to-minio"
        from: "ospo-app"
        to: "minio"
        ports: [9000]
      - name: "keycloak-to-postgres"
        from: "keycloak"
        to: "postgres"
        ports: [5432]

# Application configuration
app:
  image:
    repository: image-registry.openshift-image-registry.svc:5000/prod-rh-events-org/ospo-events-app
    tag: latest
    pullPolicy: IfNotPresent  # Use IfNotPresent for production
  service:
    type: ClusterIP
    port: 4576
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  env:
    NODE_ENV: production
    PORT: "4576"
    SESSION_SECRET: "CHANGE-ME-PRODUCTION-SECRET-32-CHARS"
    SESSION_STORE_TYPE: "memory"
    VITE_SERVE_CLIENT: "true"
    KEYCLOAK_CLIENT_ID: "ospo-events-app"
    KEYCLOAK_CLIENT_SECRET: "CHANGE-ME-PRODUCTION-CLIENT-SECRET"

# PostgreSQL configuration
postgresql:
  enabled: true
  image:
    repository: postgres
    tag: 16-alpine
    pullPolicy: IfNotPresent
  auth:
    username: ospo_user
    password: "CHANGE-ME-SECURE-DB-PASSWORD"
    database: ospo_events
  service:
    port: 5432
  persistence:
    enabled: true
    size: 10Gi  # Larger storage for production
    storageClass: ""  # Use default OpenShift storage class
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

# Keycloak configuration
keycloak:
  enabled: true
  image:
    repository: quay.io/keycloak/keycloak
    tag: 23.0.6
    pullPolicy: IfNotPresent
  admin:
    username: admin
    password: "CHANGE-ME-KEYCLOAK-ADMIN-PASSWORD"
  realm: ospo-events
  service:
    port: 8080
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi

# MinIO configuration
minio:
  enabled: true
  image:
    repository: quay.io/minio/minio
    tag: RELEASE.2024-05-10T01-41-38Z
    pullPolicy: IfNotPresent
  auth:
    rootUser: minioadmin
    rootPassword: "CHANGE-ME-MINIO-PASSWORD"
  service:
    apiPort: 9000
    consolePort: 9001
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  persistence:
    enabled: true
    size: 50Gi  # Larger storage for production files
    storageClass: ""  # Use default OpenShift storage class

# Service Account
serviceAccount:
  create: true
  name: ""
  annotations: {}

# Shared volume configuration
sharedVolume:
  enabled: true
  persistentVolumeClaim:
    enabled: true
    name: ospo-uploads-pvc
    size: 10Gi  # Larger upload storage
    storageClass: ""  # Use default OpenShift storage class
    accessMode: ReadWriteOnce

# Disable non-OpenShift features
loadBalancer:
  enabled: false

nodePort:
  enabled: false

ingress:
  enabled: false

# Production: Enable monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s

# Production: Enable Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Production: Enable Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Network Policies (additional to Otterize)
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: openshift-ingress
    - from:
        - namespaceSelector:
            matchLabels:
              name: openshift-monitoring
  egress:
    - to: []  # Allow all egress (Otterize will control this)