apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-minio
  labels:
    app: {{ .Release.Name }}-minio
    {{- include "ospo-app.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-minio
      {{- include "ospo-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-minio
        {{- include "ospo-app.selectorLabels" . | nindent 8 }}
      annotations:
        # Add timestamp annotation to force update on image rebuild
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      containers:
        - name: minio
          image: {{ .Values.minio.image.repository }}:{{ .Values.minio.image.tag }}
          imagePullPolicy: {{ .Values.minio.image.pullPolicy }}
          # Create the default bucket and start MinIO server
          args:
            - server
            - /data
            - --console-address
            - :{{ .Values.minio.service.consolePort }}
          ports:
            - name: api
              containerPort: {{ .Values.minio.service.port }}
              protocol: TCP
            - name: console
              containerPort: {{ .Values.minio.service.consolePort }}
              protocol: TCP
          env:
            - name: MINIO_ROOT_USER
              value: {{ .Values.minio.auth.rootUser }}
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.minio.secretName" . }}
                  key: {{ .Values.minio.auth.secretKeys.rootPasswordKey }}
            # Create default bucket on startup
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_DOMAIN
              value: minio
            - name: MINIO_OPTS
              value: "--address :{{ .Values.minio.service.port }} --console-address :{{ .Values.minio.service.consolePort }}"
          resources:
            {{- toYaml .Values.minio.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /data
          # Use startup probe to give MinIO time to initialize
          startupProbe:
            httpGet:
              path: /minio/health/live
              port: api
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 30
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: api
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: api
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: data
          {{- if .Values.minio.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-minio-data
          {{- else }}
          emptyDir: {}
          {{- end }}