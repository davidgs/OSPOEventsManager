apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-app
  labels:
    app: {{ .Release.Name }}-app
    {{- include "ospo-app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-app
      {{- include "ospo-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-app
        {{- include "ospo-app.selectorLabels" . | nindent 8 }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      initContainers:
        # First init container - copy the actual running app code from the repository
        - name: app-cloner
          # Use a Node.js Alpine image for building
          image: node:20-alpine
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-c"
            - |
              # THIS INIT CONTAINER COPIES THE ACTUAL APPLICATION CODE
              echo "Preparing to copy working application code..."
              mkdir -p /source-code
              cd /source-code
              
              # Clone the actual app
              echo "Copying project files from current directory..."
              
              # Create all necessary directories to avoid errors
              mkdir -p client/src server/dist shared public/uploads
              
              # Copy application files using tar to maintain ownership and permissions
              echo "Copying application files (package.json, configs)..."
              if [ -f "/current-app/package.json" ]; then
                cp -v /current-app/package.json .
                cp -v /current-app/tsconfig.json . 2>/dev/null || echo "No tsconfig.json found"
                cp -v /current-app/drizzle.config.ts . 2>/dev/null || echo "No drizzle config found"
                cp -v /current-app/tailwind.config.ts . 2>/dev/null || echo "No tailwind config found"
                cp -v /current-app/postcss.config.js . 2>/dev/null || echo "No postcss config found"
                cp -v /current-app/vite.config.ts . 2>/dev/null || echo "No vite config found"
              fi
              
              # Copy directories with glob patterns to avoid errors if they don't exist
              cp -rv /current-app/client/* client/ 2>/dev/null || echo "No client directory found"
              cp -rv /current-app/server/* server/ 2>/dev/null || echo "No server directory found"
              cp -rv /current-app/shared/* shared/ 2>/dev/null || echo "No shared directory found"
              cp -rv /current-app/public/* public/ 2>/dev/null || echo "No public directory found"
              cp -rv /current-app/dist/* dist/ 2>/dev/null || echo "No dist directory found"
                
              echo "Content copied successfully"
          volumeMounts:
            # Mount the volume to store the application code
            - name: app-source
              mountPath: /source-code
              
            # You need to mount the existing application code - using app-code as a temporary mount
            - name: current-app-code
              mountPath: /current-app
              
        # Second init container - prepare the application for running
        - name: app-setup
          image: {{ .Values.appServer.image.repository }}:{{ .Values.appServer.image.tag }}
          imagePullPolicy: {{ .Values.appServer.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              # Preparing the application for running in Kubernetes
              mkdir -p /setup/app/server/dist
              mkdir -p /setup/app/shared
              mkdir -p /setup/app/public/uploads
              
              # Creating uploads directory with proper permissions
              chmod -R 777 /setup/app/public/uploads
              
              # Copying application code from the source 
              if [ -d "/app-source" ] && [ -f "/app-source/package.json" ]; then
                echo "Copying source code from app-source volume..."
                cp -rv /app-source/* /setup/app/
              elif [ -f "/app-code/package.json" ]; then
                # Fallback to ConfigMap
                echo "Copying package.json from ConfigMap"
                cp -v /app-code/package.json /setup/app/
                
                if [ -f "/app-code/server_dist_index.js" ]; then
                  echo "Copying server implementation from ConfigMap"
                  cp -v /app-code/server_dist_index.js /setup/app/server/dist/index.js
                fi
                
                if [ -f "/app-code/shared_schema.js" ]; then
                  echo "Copying shared schema from ConfigMap"
                  cp -v /app-code/shared_schema.js /setup/app/shared/schema.js
                fi
              fi
              
              # Create a fallback HTML file if needed
              if [ ! -f "/setup/app/public/index.html" ]; then
                cat > /setup/app/public/index.html << 'EOF'
                <!DOCTYPE html>
                <html lang="en">
                <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>OSPO Events App</title>
                  <style>
                    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    h1 { color: #2563eb; }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <h1>OSPO Events Management</h1>
                    <p>Application running in Kubernetes production mode.</p>
                    <div id="app">Loading application...</div>
                  </div>
                </body>
                </html>
                EOF
              fi
              
              # Install dependencies
              cd /setup/app
              echo "Installing dependencies..."
              npm install --omit=dev || npm install --no-save express @neondatabase/serverless drizzle-orm express-fileupload express-session
              echo "Setup complete."
          volumeMounts:
            - name: app-code
              mountPath: /app-code
            - name: app-setup
              mountPath: /setup
            - name: app-source
              mountPath: /app-source
      containers:
        - name: app-server
          image: {{ .Values.appServer.image.repository }}:{{ .Values.appServer.image.tag }}
          imagePullPolicy: {{ .Values.appServer.image.pullPolicy }}
          command:
            - "/bin/sh" 
            - "-c"
            - |
              echo "Starting application..."
              
              # Debug - list all files in key directories
              echo "Listing directories to verify file structure:"
              find /app -type d | sort
              
              echo "Checking for server entry points:"
              ls -la /app/server/dist/ || echo "No server/dist directory found"
              ls -la /app/server/ || echo "No server directory found"
              
              # Try to compile TypeScript files if needed
              if [ ! -f "/app/server/dist/index.js" ] && [ -f "/app/server/index.ts" ]; then
                echo "Found TypeScript source but no compiled JS. Attempting to compile..."
                cd /app
                npx tsc --project tsconfig.json || echo "Failed to compile TypeScript"
              fi

              # Handle different server entry points
              cd /app
              if [ -f "/app/server/dist/index.js" ]; then
                echo "Starting from built server code"
                node server/dist/index.js
              elif [ -f "/app/server/index.js" ]; then
                echo "Starting from server source (JS)"
                node server/index.js
              elif [ -f "/app/server/index.ts" ]; then
                echo "Starting from server source (TS) with tsx"
                npx tsx server/index.ts
              elif [ -f "/app/index.js" ]; then
                echo "Starting from root index.js"
                node index.js
              else
                echo "ERROR: No server entry point found! Creating emergency server..."
                # Create an emergency server file
                mkdir -p /app/server/dist
                cat > /app/server/dist/index.js << 'EOF'
                const express = require('express');
                const app = express();
                const PORT = process.env.PORT || 5000;
                
                app.use(express.json());
                
                app.get('/api/health', (req, res) => {
                  res.json({ 
                    status: 'error', 
                    message: 'Emergency server running - no proper server entry point found',
                    timestamp: new Date().toISOString()
                  });
                });
                
                app.get('*', (req, res) => {
                  res.status(503).send('Application server entry point not found. Check container configuration.');
                });
                
                app.listen(PORT, '0.0.0.0', () => {
                  console.log(`Emergency server started on port ${PORT}`);
                });
                EOF
                node server/dist/index.js
              fi
          ports:
            - name: http
              containerPort: {{ .Values.appServer.service.port }}
              protocol: TCP
          env:
            - name: NODE_ENV
              value: {{ .Values.appServer.env.NODE_ENV }}
            - name: PORT
              value: "{{ .Values.appServer.service.port }}"
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.postgresql.auth.username }}:ospo_password123@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.auth.database }}"
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.app.secretName" . }}
                  key: session-secret
            - name: KEYCLOAK_URL
              value: "http://{{ .Release.Name }}-keycloak:{{ .Values.keycloak.service.port }}"
            - name: KEYCLOAK_REALM
              value: "ospo-events"
            - name: KEYCLOAK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.keycloak.secretName" . }}
                  key: client-secret
            - name: MINIO_ENDPOINT
              value: "{{ .Release.Name }}-minio:{{ .Values.minio.service.port }}"
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.minio.secretName" . }}
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.minio.secretName" . }}
                  key: secret-key
            {{- if .Values.appServer.env }}
            {{- range $key, $value := .Values.appServer.env }}
            {{- if ne $key "NODE_ENV" }}
            {{- if ne $key "PORT" }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.appServer.resources | nindent 12 }}
          volumeMounts:
            - name: app-code
              mountPath: /app-code
            - name: app-setup
              mountPath: /app
            - name: app-scripts
              mountPath: /app-scripts
            # Mount the source code directory if available
            - name: app-source
              mountPath: /app-source
            {{- if .Values.sharedVolume.enabled }}
            - name: shared-volume
              mountPath: /app/public/uploads
            {{- end }}
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: app-code
          configMap:
            name: {{ .Release.Name }}-app-code
        - name: app-scripts
          configMap:
            name: {{ .Release.Name }}-app-scripts
        - name: app-setup
          emptyDir: {}
        - name: app-source
          emptyDir: {}
        # Mount current working directory as a host path
        - name: current-app-code
          hostPath:
            path: {{ .Values.repository.localPath | default "/app" }}
            type: Directory
        {{- if .Values.sharedVolume.enabled }}
        - name: shared-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-shared-volume
        {{- end }}