apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-app
  labels:
    app: {{ .Release.Name }}-app
    {{- include "ospo-app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-app
      {{- include "ospo-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-app
        {{- include "ospo-app.selectorLabels" . | nindent 8 }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      initContainers:
        # First init container to copy application code
        - name: app-copy
          image: {{ .Values.appServer.image.repository }}:{{ .Values.appServer.image.tag }}
          imagePullPolicy: {{ .Values.appServer.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              echo "Preparing to copy working application code..."
              mkdir -p /source-code
              cd /source-code
              
              # Create all necessary directories
              mkdir -p client/src server/dist shared public/uploads
              
              # Copy application files
              echo "Copying application files (package.json, configs)..."
              if [ -f "/current-app/package.json" ]; then
                cp -v /current-app/package.json .
                cp -v /current-app/tsconfig.json . 2>/dev/null || echo "No tsconfig.json found"
                cp -v /current-app/drizzle.config.ts . 2>/dev/null || echo "No drizzle config found"
                cp -v /current-app/tailwind.config.ts . 2>/dev/null || echo "No tailwind config found"
                cp -v /current-app/postcss.config.js . 2>/dev/null || echo "No postcss config found"
              fi
              
              # Copy server files
              echo "Copying server files..."
              if [ -d "/current-app/server" ]; then
                cp -rv /current-app/server/* server/ 2>/dev/null || echo "No server files found"
              fi
              
              # Copy shared schema
              echo "Copying shared schema..."
              if [ -d "/current-app/shared" ]; then
                cp -rv /current-app/shared/* shared/ 2>/dev/null || echo "No shared files found"
              fi
              
              # Copy client files if they exist
              echo "Copying client files..."
              if [ -d "/current-app/client" ]; then
                cp -rv /current-app/client/* client/ 2>/dev/null || echo "No client files found"
              fi
              
              # Copy public files
              echo "Copying public files..."
              if [ -d "/current-app/public" ]; then
                mkdir -p public
                cp -rv /current-app/public/* public/ 2>/dev/null || echo "No public files found"
              fi
              
              if [ -d "/current-app/dist" ]; then
                mkdir -p dist
                cp -rv /current-app/dist/* dist/ 2>/dev/null || echo "No dist files found"
              fi
              
              echo "Complete application copy process"
          volumeMounts:
            - name: app-source
              mountPath: /source-code
            - name: current-app-code
              mountPath: /current-app
              
        # Second init container - prepare the application for running
        - name: app-setup
          image: {{ .Values.appServer.image.repository }}:{{ .Values.appServer.image.tag }}
          imagePullPolicy: {{ .Values.appServer.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              # Preparing the application for running in Kubernetes
              mkdir -p /setup/app/server/dist
              mkdir -p /setup/app/shared
              mkdir -p /setup/app/public/uploads
              
              # Creating uploads directory with proper permissions
              chmod -R 777 /setup/app/public/uploads
              
              # Copy server files from previous init container
              echo "Copying server code to setup directory..."
              if [ -d "/app-source/server" ]; then
                cp -rv /app-source/server/* /setup/app/server/ 2>/dev/null
              fi
              
              # Copy shared schema
              echo "Copying shared schema..."
              if [ -d "/app-source/shared" ]; then
                cp -rv /app-source/shared/* /setup/app/shared/ 2>/dev/null
              fi
              
              # Copy frontend files if they exist
              echo "Copying public files..."
              if [ -d "/app-source/public" ]; then
                cp -rv /app-source/public/* /setup/app/public/ 2>/dev/null
              fi
              
              if [ -d "/app-source/dist" ]; then
                cp -rv /app-source/dist/* /setup/app/public/ 2>/dev/null
              fi
              
              # If shared schema doesn't exist, copy from app-code
              if [ ! -f "/setup/app/shared/schema.js" ] && [ -f "/app-code/shared_schema.js" ]; then
                echo "Using backup schema from ConfigMap..."
                mkdir -p /setup/app/shared
                cp -v /app-code/shared_schema.js /setup/app/shared/schema.js
              fi
              
              # If server doesn't exist, copy from app-code
              if [ ! -f "/setup/app/server/dist/index.js" ] && [ -f "/app-code/server_dist_index.js" ]; then
                echo "Using backup server code from ConfigMap..."
                mkdir -p /setup/app/server/dist
                cp -v /app-code/server_dist_index.js /setup/app/server/dist/index.js
              fi
              
              # Install dependencies
              cd /setup/app
              echo "Installing dependencies..."
              npm install --omit=dev || npm install --no-save express @neondatabase/serverless drizzle-orm express-fileupload express-session
              echo "Setup complete."
          volumeMounts:
            - name: app-code
              mountPath: /app-code
            - name: app-setup
              mountPath: /setup
            - name: app-source
              mountPath: /app-source
      containers:
        - name: app-server
          image: {{ .Values.appServer.image.repository }}:{{ .Values.appServer.image.tag }}
          imagePullPolicy: {{ .Values.appServer.image.pullPolicy }}
          command: 
            - "/bin/sh"
            - "-c"
            - |
              echo "Starting the application from prepared environment..."
              ls -la /app /app/server /app/server/dist || echo "Directory listing failed"
              
              if [ -f "/app/server/dist/index.js" ]; then
                echo "Found server file. Starting application..."
                node /app/server/dist/index.js
              elif [ -f "/app-code/server_dist_index.js" ]; then
                echo "Using backup server code..."
                mkdir -p /app/server/dist
                cp -v /app-code/server_dist_index.js /app/server/dist/index.js
                node /app/server/dist/index.js
              else
                echo "ERROR: No server entry point found! Check volume mounts."
                # Create a minimal emergency server
                mkdir -p /app/server/dist
                echo 'const express = require("express");
                const app = express();
                const PORT = process.env.PORT || 5000;
                
                app.get("/api/health", (req, res) => {
                  res.json({
                    status: "error",
                    message: "Emergency server - no proper server files found",
                    time: new Date().toISOString()
                  });
                });
                
                app.get("*", (req, res) => {
                  res.status(503).send("Application server entry point not found.");
                });
                
                app.listen(PORT, "0.0.0.0", () => {
                  console.log(`Emergency server started on port ${PORT}`);
                });' > /app/server/dist/index.js
                node /app/server/dist/index.js
              fi
          ports:
            - name: http
              containerPort: {{ .Values.appServer.service.port }}
              protocol: TCP
          env:
            - name: NODE_ENV
              value: {{ .Values.appServer.env.NODE_ENV }}
            - name: PORT
              value: "{{ .Values.appServer.service.port }}"
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.postgresql.auth.username }}:ospo_password123@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.auth.database }}"
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.app.secretName" . }}
                  key: session-secret
            - name: KEYCLOAK_URL
              value: "http://{{ .Release.Name }}-keycloak:{{ .Values.keycloak.service.port }}"
            - name: KEYCLOAK_REALM
              value: "ospo-events"
            - name: KEYCLOAK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.keycloak.secretName" . }}
                  key: client-secret
            - name: MINIO_ENDPOINT
              value: "{{ .Release.Name }}-minio:{{ .Values.minio.service.port }}"
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.minio.secretName" . }}
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.minio.secretName" . }}
                  key: secret-key
            {{- if .Values.appServer.env }}
            {{- range $key, $value := .Values.appServer.env }}
            {{- if ne $key "NODE_ENV" }}
            {{- if ne $key "PORT" }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.appServer.resources | nindent 12 }}
          volumeMounts:
            - name: app-code
              mountPath: /app-code
            - name: app-setup
              mountPath: /app
            - name: app-scripts
              mountPath: /app-scripts
            - name: app-source
              mountPath: /app-source
            {{- if .Values.sharedVolume.enabled }}
            - name: shared-volume
              mountPath: /app/public/uploads
            {{- end }}
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 3
      volumes:
        # Volume for ConfigMap with app code
        - name: app-code
          configMap:
            name: {{ .Release.Name }}-app-code
        # Volume for init container setup
        - name: app-setup
          emptyDir: {}
        # Volume for app scripts
        - name: app-scripts
          configMap:
            name: {{ .Release.Name }}-app-scripts
        # Volume for source code
        - name: app-source
          emptyDir: {}
        # Volume with current app code from local
        - name: current-app-code
          hostPath:
            path: {{ .Values.currentAppPath | default "/app" }}
        {{- if .Values.sharedVolume.enabled }}
        # Volume for shared uploads
        - name: shared-volume
          {{- if .Values.sharedVolume.persistentVolumeClaim.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.sharedVolume.persistentVolumeClaim.name }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}