apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-app
  labels:
    app: {{ .Release.Name }}-app
    {{- include "ospo-app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-app
      {{- include "ospo-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-app
        {{- include "ospo-app.selectorLabels" . | nindent 8 }}
      annotations:
        # Add timestamp annotation to force update on image rebuild
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      # Create a ConfigMap to store the application code
      containers:
        - name: app-server
          image: "{{ .Values.appServer.image.repository }}:{{ .Values.appServer.image.tag }}"
          imagePullPolicy: {{ .Values.appServer.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              mkdir -p /app
              cd /app
              cat > package.json << 'EOF'
              {
                "name": "ospo-events-app",
                "version": "1.0.0",
                "main": "index.js",
                "scripts": {
                  "start": "node index.js"
                },
                "dependencies": {
                  "express": "^4.18.2"
                }
              }
              EOF
              cat > index.js << 'EOF'
              const express = require("express");
              const app = express();
              const port = process.env.PORT || 5000;
              
              app.get("/api/health", (req, res) => {
                res.json({ status: "healthy", message: "Fallback server is running" });
              });
              
              app.get("/", (req, res) => {
                res.send("OSPO Events App - Emergency Fallback Mode");
              });
              
              app.listen(port, "0.0.0.0", () => {
                console.log(`Emergency fallback server listening on port ${port}`);
              });
              EOF
              npm install express --no-audit
              node index.js
          ports:
            - name: http
              containerPort: {{ .Values.appServer.service.port }}
              protocol: TCP
          env:
            - name: NODE_ENV
              value: {{ .Values.appServer.env.NODE_ENV }}
            - name: PORT
              value: "{{ .Values.appServer.service.port }}"
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.postgresql.auth.username }}:ospo_password123@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.auth.database }}"
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.app.secretName" . }}
                  key: session-secret
            # New Keycloak v21+ doesn't use the /auth path anymore
            - name: KEYCLOAK_URL
              value: "http://{{ .Release.Name }}-keycloak:{{ .Values.keycloak.service.port }}"
            - name: KEYCLOAK_REALM
              value: "ospo-events"
            - name: KEYCLOAK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.keycloak.secretName" . }}
                  key: client-secret
            - name: MINIO_ENDPOINT
              value: "{{ .Release.Name }}-minio:{{ .Values.minio.service.port }}"
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.minio.secretName" . }}
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.minio.secretName" . }}
                  key: secret-key
            # Add any additional environment variables from values
            {{- if .Values.appServer.env }}
            {{- range $key, $value := .Values.appServer.env }}
            {{- if ne $key "NODE_ENV" }}
            {{- if ne $key "PORT" }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.appServer.resources | nindent 12 }}
          volumeMounts:
            - name: app-code
              mountPath: /app-code
            - name: app-data
              mountPath: /app/uploads
            {{- if .Values.sharedVolume.enabled }}
            - name: shared-volume
              mountPath: {{ .Values.sharedVolume.mountPath }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: app-code
          configMap:
            name: {{ .Release.Name }}-app-code
        - name: app-data
          emptyDir: {}
        {{- if .Values.sharedVolume.enabled }}
        - name: shared-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-shared-volume
        {{- end }}