apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-minio-init
  labels:
    app: {{ .Release.Name }}-minio-init
    {{- include "ospo-app.labels" . | nindent 4 }}
  annotations:
    # Add timestamp annotation to force update on image rebuild
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-minio-init
        {{- include "ospo-app.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      containers:
        - name: mc
          image: minio/mc:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Wait for MinIO to be available
              sleep 10
              
              # Set up MinIO client with our MinIO instance
              mc alias set myminio http://{{ .Release.Name }}-minio:{{ .Values.minio.service.port }} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
              
              # Create the bucket if it doesn't exist
              mc mb -p myminio/{{ .Values.minio.defaultBuckets }} || echo "Bucket already exists"
              
              # Set the bucket policy to public (if needed)
              # mc policy set public myminio/{{ .Values.minio.defaultBuckets }}
              
              # Set up CORS (if needed)
              # mc admin config set myminio cors:policy.json='{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:GetObject"],"Resource":["arn:aws:s3:::{{ .Values.minio.defaultBuckets }}/*"]}]}'
              
              echo "MinIO initialization completed"
          env:
            - name: MINIO_ROOT_USER
              value: {{ .Values.minio.auth.rootUser }}
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "ospo-app.minio.secretName" . }}
                  key: root-password