# OSPO Events Manager - Local Development Configuration
# Copy this file to .env.local for local development with KIND cluster
# Usage: cp env.local.template .env.local

# =============================================================================
# LOCAL DEVELOPMENT MODE
# =============================================================================
# This configuration is for running the application locally on your machine
# with dependencies (PostgreSQL, Keycloak, MinIO) running in a KIND cluster.
#
# SETUP STEPS:
# 1. Start KIND cluster: ./kind/setup-kind.sh start
# 2. Copy this file: cp env.local.template .env.local
# 3. Push database schema: npm run db:push:local
# 4. Run app: npm run dev:local
# =============================================================================

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

NODE_ENV=development
PORT=4576

# =============================================================================
# DATABASE CONFIGURATION (PostgreSQL in KIND)
# =============================================================================

# PostgreSQL is running in KIND cluster, port-forwarded to localhost:5432
PGHOST=localhost
PGPORT=5432
PGDATABASE=ospo_events
PGUSER=ospo_user
PGPASSWORD=ospo_password

# Full database connection string
DATABASE_URL=postgres://ospo_user:ospo_password@localhost:5432/ospo_events

# =============================================================================
# KEYCLOAK CONFIGURATION (Keycloak in KIND)
# =============================================================================

# Keycloak is running in KIND cluster, port-forwarded to localhost:8080
# KEYCLOAK_URL is used for both client and server configuration
# Note: Include /auth path since Keycloak is configured with KC_HTTP_RELATIVE_PATH=/auth
KEYCLOAK_URL=http://localhost:8080/auth
KEYCLOAK_CLIENT_URL=http://localhost:8080/auth
VITE_KEYCLOAK_URL=http://localhost:8080/auth

# For server-side communication (within app) - used for internal service-to-service calls
KEYCLOAK_SERVICE_NAME=localhost
KEYCLOAK_SERVICE_PORT=8080

# Keycloak realm configuration
KEYCLOAK_REALM=ospo-events
KEYCLOAK_CLIENT_ID=ospo-events-app

# Keycloak admin credentials (for realm setup)
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=admin

# Keycloak database configuration (used by Keycloak itself)
KEYCLOAK_DB_HOST=postgres
KEYCLOAK_DB_PORT=5432
KEYCLOAK_DB_NAME=keycloak
KEYCLOAK_DB_USER=keycloak_user
KEYCLOAK_DB_PASSWORD=keycloak_pass

# =============================================================================
# MINIO CONFIGURATION (MinIO in KIND)
# =============================================================================

# MinIO is running in KIND cluster, port-forwarded to:
# - API: localhost:9000
# - Console: localhost:9001
MINIO_ENDPOINT=localhost:9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_BUCKET=ospo-uploads

# Local uploads directory fallback
UPLOADS_DIR=./public/uploads

# =============================================================================
# SECURITY & SESSIONS
# =============================================================================

# Session configuration (safe defaults for local development)
SESSION_SECRET=local-dev-secret-change-for-production
SESSION_RESAVE=false
SESSION_SAVE_UNINITIALIZED=false
SESSION_SECURE=false
SESSION_HTTP_ONLY=true
SESSION_MAX_AGE=86400000
SESSION_SAME_SITE=lax
SESSION_NAME=ospo.sid

# JWT configuration
JWT_SECRET=local-dev-jwt-secret-change-for-production

# =============================================================================
# RATE LIMITING (Relaxed for local development)
# =============================================================================

RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=1000
RATE_LIMIT_MESSAGE="Too many requests from this IP, please try again later."
RATE_LIMIT_RETRY_AFTER=900
RATE_LIMIT_STANDARD_HEADERS=true
RATE_LIMIT_LEGACY_HEADERS=false
RATE_LIMIT_SKIP_PATHS="/api/health,/api/version"

# =============================================================================
# SECURITY HEADERS (Helmet/CSP) - Relaxed for local development
# =============================================================================

CSP_STYLE_SRC=https://fonts.googleapis.com
CSP_FONT_SRC=https://fonts.gstatic.com
CSP_OBJECT_SRC=none

HELMET_COEP=false
HELMET_HSTS_MAX_AGE=0
HELMET_HSTS_INCLUDE_SUBDOMAINS=false
HELMET_HSTS_PRELOAD=false

# =============================================================================
# FRONTEND BUILD VARIABLES (Vite)
# =============================================================================

# This is used during frontend build to configure Keycloak client
VITE_KEYCLOAK_URL=http://localhost:8080/auth

# =============================================================================
# NOTES FOR LOCAL DEVELOPMENT
# =============================================================================
#
# Service Access:
# ---------------
# PostgreSQL:        localhost:5432
# Keycloak:          http://localhost:8080/auth
# Keycloak Admin:    http://localhost:8080/auth/admin (admin/admin)
# MinIO API:         http://localhost:9000
# MinIO Console:     http://localhost:9001 (minioadmin/minioadmin)
# Application:       http://localhost:4576
#
# Useful Commands:
# ----------------
# Start KIND cluster:     ./kind/setup-kind.sh start
# Stop KIND cluster:      ./kind/setup-kind.sh stop
# Restart KIND cluster:   ./kind/setup-kind.sh restart
# Delete KIND cluster:    ./kind/setup-kind.sh delete
# Port-forward services:  ./kind/port-forward.sh
# Check cluster status:   ./kind/setup-kind.sh status
#
# Development Workflow:
# ---------------------
# 1. Start KIND cluster and port-forward services (one-time setup)
# 2. Run 'npm run dev:local' to start the application locally
# 3. Access the application at http://localhost:4576
# 4. Make changes to code - hot reload will update automatically
# 5. Use Keycloak admin console to manage users and realms
#
# Database Access:
# ----------------
# psql "postgres://ospo_user:ospo_password@localhost:5432/ospo_events"
#
# Troubleshooting:
# ----------------
# - If services are not accessible, check port-forwards: ps aux | grep port-forward
# - Restart port-forwards: ./kind/port-forward.sh
# - Check pod status: kubectl get pods -n ospo-local
# - View logs: kubectl logs -n ospo-local <pod-name>
#


